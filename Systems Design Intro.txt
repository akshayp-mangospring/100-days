I'm gonna learn Basic Engineering Design Patterns that are used design large scale distributed systems.
Large Scale means that it's very intensive in Computation or Data.

Large Scale software:
A hell lot of Data
The data gets updated very frequently
It's used by a hell lot of users
Top notch Performance
The System doesn't ever go down

For example: Google Maps

Distributed System:
The server or the code executing the app is not in one place
So, there might be a server in India, one in Japan, one in USA.
So, requests from India will be catered by Indian Server whereas requests from Japan will be catered by Japanese Server, so that it doesn't have to go to the server across continents in USA. This ensures faster performance for the app.
Having multiple servers also helps in not crashing the entire system down, so, if the server in Japan crashes then the requests from Japan would be redirected to server in India thus saving the system from shutting down.

Main job of engineer:
Take in Business requirements and convert them into technical solutions to make reliable, scalable and maintainable systems.

Design Patterns in System Design:
Publisher Subscriber Model

System Design of a Live Streaming Application:
Examples:
  Youtube
  Netflix
  Hotstar

First thing is define the requirements from the user's perspective.

So the most important thing for such an app is that the content should be seen live and the server doesn't go down when millions are livestreaming such content.

Convert features or abstract business requirements into data definitions.
  Such as converting a like/comment on a Youtube video into a data definition.
    A like/comment will have an Id, content, created at timestamp, which video was it posted on, part of a thread or not, etc.
